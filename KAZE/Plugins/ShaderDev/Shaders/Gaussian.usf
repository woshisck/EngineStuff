struct GaussianBlur
{
    float Calculate1DGaussian(float x){
        return exp(-0.5 * pow(3.141 * (x), 2));
    }
    
    float3 gaussian_blur(int Radius, float2 UV, float2 TexelSize){
        int SceneTextureId = 14;
        float2 Offset = 0;
        
        float3 PixelSum = float3(0, 0, 0);
        float WeightSum = 0;
        for (int x = -Radius; x <= Radius; x++)
        {
            for (int y = -Radius; y <= Radius; y++)
            {
                Offset = UV + float2(x, y) * TexelSize;
                float3 PixelColor = SceneTextureLookup(Offset, SceneTextureId, 0).rgb;
                float Weight = Calculate1DGaussian(x / Radius) * Calculate1DGaussian(y / Radius);
                PixelSum += PixelColor * Weight;
                WeightSum += Weight;
            }
        }

        // return PixelSum / WeightSum;
        return PixelSum;
    }

};
GaussianBlur g;
return g.gaussian_blur(Radius, UV, TexelSize);



// struct GaussianBlur
// {
//     float Calculate1DGaussian(float x){
//         return exp(-0.5 * pow(3.141 * (x), 2));
//     }
    
//     float3 gaussian_blur(int Radius, float2 UV){
//         int SceneTextureId = 14;
//         float2 TexelSize = View.ViewSizeAndInvSize.zw;
        
//         float3 PixelSum = float3(0, 0, 0);
//         float WeightSum = 0;
//         for (int x = -Radius; x <= Radius; x++)
//         {
//             for (int y = -Radius; y <= Radius; y++)
//             {
//                 float2 Offset = UV + float2(x, y) * TexelSize;
//                 float3 PixelColor = SceneTextureLookup(Offset, SceneTextureId, 0).rgb;
//                 float Weight = Calculate1DGaussian(x / Radius) * Calculate1DGaussian(y / Radius);
//                 PixelSum += PixelColor * Weight;
//                 WeightSum += Weight;
//             }
//         }

//         return PixelSum / WeightSum;
//     }

// };
// GaussianBlur g;
// return g.gaussian_blur(Radius, UV);
